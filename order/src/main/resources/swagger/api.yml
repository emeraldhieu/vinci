openapi: 3.0.3
info:
  title: Order - OpenAPI 3.0
  description: Order API that manages shopping orders.
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: Orders
    description: Everything about order
paths:
  /orders:
    get:
      tags:
        - Orders
      summary: Get a list of orders
      description: Get a list of orders
      operationId: listOrders
      responses:
        '200':
          description: Order listed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
    post:
      tags:
        - Orders
      summary: Create a new order
      description: POST /orders
      operationId: createOrder
      requestBody:
        description: Create a new order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
  /orders/{id}:
    patch:
      tags:
        - Orders
      summary: Update an existing order
      description: Update an existing order by ID
      operationId: updateOrder
      parameters:
        - name: id
          in: path
          description: Order ID to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent order
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
        required: true
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
    get:
      tags:
        - Orders
      summary: Get an existing order
      description: Get an existing order
      operationId: getOrder
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Order retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
    delete:
      tags:
        - Orders
      summary: Delete an order
      description: Delete an order
      operationId: deleteOrder
      parameters:
        - name: id
          in: path
          description: Order ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Deletion succeeded
        '404':
          description: Order not found
components:
  schemas:
    OrderRequest:
      type: object
      required:
        - userId
        - products
      properties:
        userId:
          type: integer
          format: int64
          example: 42
        products:
          type: array
          items:
            type: string
          example: [ "pizza", "burger", "spaghetti" ]
    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        userId:
          type: integer
          format: int64
          example: 42
        products:
          type: array
          items:
            type: string
          example: [ "pizza", "burger", "spaghetti" ]
        createdBy:
          type: string
          example: 'John'
        createdAt:
          type: string
          format: date-time
          example: '2022-11-27T01:02:03Z'
        updatedBy:
          type: string
          example: 'Jane'
        updatedAt:
          type: string
          format: date-time
          example: '2022-11-28T04:05:06Z'
