version: '3.5'

services:
  postgres:
    image: postgres:15.1-alpine
    container_name: postgres
    hostname: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /data/postgres
      POSTGRES_MULTIPLE_DATABASES: "order,payment,shipping"
    ports:
      - "5432:5432"
    volumes:
      - postgres:/data/postgres
      # Create multiple databases with users upon starting
      # See https://github.com/mrts/docker-postgresql-multiple-databases#using-multiple-databases-with-the-official-postgresql-docker-image
      # Remember to grant execution to your script: "chmod +x <yourScript>"
      - ./postgres-scripts:/docker-entrypoint-initdb.d
    networks:
      postgres:
        # Set static IP for PgAdmin to connect to a specific IP
        ipv4_address: 10.1.0.100

  # I got "Permission denied at /home/" when exporting a database table.
  # pgadmin:
  #   container_name: pgadmin_container
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-emerald.hieu@gmail.com}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   volumes:
  #      - pgadmin:/var/lib/pgadmin
  #   ports:
  #     - "${PGADMIN_PORT:-5050}:80"
  #   networks:
  #     - postgres
  #   restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.1.1
    container_name: zookeeper
    hostname: zookeeper
    # Enable this in Mac Book Pro M1
    #platform: linux/x86_64
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-transaction-logs:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888

  kafka1:
    image: confluentinc/cp-kafka:7.1.1
    container_name: kafka1
    hostname: kafka1
    # Enable this in Mac Book Pro M1
    #platform: linux/x86_64
    ports:
      - "9092:9092"
    volumes:
      - kafka1-data:/var/lib/kafka/data
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka1:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zookeeper

# Temporarily disable to reduce memory consumption
#  kafka2:
#    image: confluentinc/cp-kafka:7.1.1
#    container_name: kafka2
#    hostname: kafka2
#    # Enable this in Mac Book Pro M1
#    #platform: linux/x86_64
#    ports:
#      - "9093:9093"
#    volumes:
#      - kafka2-data:/var/lib/kafka/data
#    environment:
#      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka2:29093,OUTSIDE://localhost:9093
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
#      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
#      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#      KAFKA_BROKER_ID: 2
#      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_JMX_PORT: 9999
#      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
#      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
#      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
#    depends_on:
#      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    container_name: schema-registry
    hostname: schema-registry
    depends_on:
      - zookeeper
      - kafka1
#      - kafka2
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka1:29092,kafka2:29093"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"
      SCHEMA_REGISTRY_URL: "http://localhost:8081"

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.3.1
    container_name: control-center
    hostname: control-center
    depends_on:
      - kafka1
#      - kafka2
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka1:29092,kafka2:29093'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

#  jenkins:
#    image: jenkins/jenkins:jdk11
#    container_name: jenkins
#    privileged: true
#    user: root
#    ports:
#      - "8082:8080"
#      - "50000:50000"
#    volumes:
#      - jenkins-home:/var/jenkins_home
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /usr/local/bin/docker:/usr/local/bin/docker

networks:
  postgres:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 10.1.0.0/24

volumes:
  postgres:
  # pgadmin:
  zookeeper-data:
  zookeeper-transaction-logs:
  kafka1-data:
  kafka2-data:
  jenkins-home:
