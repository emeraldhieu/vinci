apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-cm
  labels:
    app: postgres
data:
  PGDATA: /data/postgres
  POSTGRES_MULTIPLE_DATABASES: "order,payment,shipping"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-script-cm
  labels:
    app: postgres
data:
  # "|-" is a "Block Chomping Indicator" that strips the final line break and all trailing empty lines
  # See https://yaml.org/spec/1.2-old/spec.html#id2794534
  createMultipleDatabases.sh: |-
    #!/bin/bash

    set -e
    set -u

    function create_user_and_database() {
      local database=$1
      local user=$database
      echo "  Creating user and database '$database'"
      PGPASSWORD=$POSTGRES_USER psql --variable ON_ERROR_STOP=1 --username $POSTGRES_PASSWORD <<-EOSQL
          CREATE USER "$user" WITH PASSWORD '$user';

          CREATE DATABASE "$database" ENCODING "UTF8";

          GRANT ALL PRIVILEGES ON DATABASE "$database" TO "$user";
    EOSQL

      # Log in with superuser on the database to grant permissions on public schema
      PGPASSWORD=$POSTGRES_USER psql --variable ON_ERROR_STOP=1 --username $POSTGRES_PASSWORD --dbname $database  <<-EOSQL
          /*
            Grant permission to create tables on public schema for a user.
            Otherwise, "ERROR:  permission denied for schema public" occurs.
          */
          GRANT ALL ON SCHEMA public TO "$user";
    EOSQL
    }

    if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
      echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
      for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
        create_user_and_database $db
      done
      echo "Multiple databases created"
    fi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-s
type: Opaque
data:
  POSTGRES_USER: cG9zdGdyZXM=
  POSTGRES_PASSWORD: cG9zdGdyZXM=
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-data-pv
  labels:
    type: local
spec:
  storageClassName: postgres-data-sc
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  # hostPath volume is used for development on a single node only. It's not used for production.
  # NOTE: If you want to clean up this data, deleting pvc is not enough. You have to manually delete it in the k8s cluster.
  hostPath:
    path: "/home/docker/postgres-data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
spec:
  storageClassName: postgres-data-sc
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15.1-alpine
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgres-cm
            - secretRef:
                name: postgres-s
          volumeMounts:
            - mountPath: /data/postgres
              name: postgres-data
            - mountPath: /docker-entrypoint-initdb.d
              name: postgres-script
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
        - name: postgres-script
          configMap:
            name: postgres-script-cm
            defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-cm
  labels:
    app: order
data:
  SPRING_PROFILES_ACTIVE: k8s
  APPLICATION_DB_HOST: postgres
  APPLICATION_DB_PORT: "5432"
---
apiVersion: v1
kind: Secret
metadata:
  name: order-s
type: Opaque
data:
  APPLICATION_DB_NAME: b3JkZXI=
  APPLICATION_DB_USER: b3JkZXI=
  APPLICATION_DB_PASSWORD: b3JkZXI=
---
apiVersion: v1
kind: Service
metadata:
  name: order
  labels:
    app: order
spec:
  # TODO Investigate why this type can't be ClusterIP
  # See https://k3d.io/v5.0.1/usage/exposing_services/#1-via-ingress-recommended
  type: LoadBalancer
  ports:
    - name: tcp
      protocol: TCP
      port: 50001
      targetPort: 8080
  selector:
    app: order
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order
  template:
    metadata:
      labels:
        app: order
    spec:
      containers:
        - name: order
          image: k3d-registry42:5050/order:1.0-SNAPSHOT
          imagePullPolicy: "Always"
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          envFrom:
            - configMapRef:
                name: order-cm
            - secretRef:
                name: order-s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: payment-cm
  labels:
    app: payment
data:
  SPRING_PROFILES_ACTIVE: k8s
  APPLICATION_DB_HOST: postgres
  APPLICATION_DB_PORT: "5432"
---
apiVersion: v1
kind: Secret
metadata:
  name: payment-s
type: Opaque
data:
  APPLICATION_DB_NAME: cGF5bWVudA==
  APPLICATION_DB_USER: cGF5bWVudA==
  APPLICATION_DB_PASSWORD: cGF5bWVudA==
---
apiVersion: v1
kind: Service
metadata:
  name: payment
  labels:
    app: payment
spec:
  # TODO Investigate why this type can't be ClusterIP
  # See https://k3d.io/v5.0.1/usage/exposing_services/#1-via-ingress-recommended
  type: LoadBalancer
  ports:
    - name: tcp
      protocol: TCP
      port: 50002
      targetPort: 8080
  selector:
    app: payment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment
  template:
    metadata:
      labels:
        app: payment
    spec:
      containers:
        - name: payment
          image: k3d-registry42:5050/payment:1.0-SNAPSHOT
          imagePullPolicy: "Always"
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          envFrom:
            - configMapRef:
                name: payment-cm
            - secretRef:
                name: payment-s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: shipping-cm
  labels:
    app: shipping
data:
  SPRING_PROFILES_ACTIVE: k8s
  APPLICATION_DB_HOST: postgres
  APPLICATION_DB_PORT: "5432"
---
apiVersion: v1
kind: Secret
metadata:
  name: shipping-s
type: Opaque
data:
  APPLICATION_DB_NAME: c2hpcHBpbmc=
  APPLICATION_DB_USER: c2hpcHBpbmc=
  APPLICATION_DB_PASSWORD: c2hpcHBpbmc=
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
  labels:
    app: shipping
spec:
  # TODO Investigate why this type can't be ClusterIP
  # See https://k3d.io/v5.0.1/usage/exposing_services/#1-via-ingress-recommended
  type: LoadBalancer
  ports:
    - name: http
      protocol: TCP
      port: 50003
      targetPort: 8080
    - name: grpc
      protocol: TCP
      port: 50013
      targetPort: 50013
  selector:
    app: shipping
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: shipping
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shipping
  template:
    metadata:
      labels:
        app: shipping
    spec:
      containers:
        - name: shipping
          image: k3d-registry42:5050/shipping:1.0-SNAPSHOT
          imagePullPolicy: "Always"
          ports:
            - containerPort: 8080
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          envFrom:
            - configMapRef:
                name: shipping-cm
            - secretRef:
                name: shipping-s
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-ing
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    # This HTTP request goes internally from the ingress to internal services
    - http:
        paths:
          - path: /order
            pathType: Prefix
            backend:
              service:
                name: order
                port:
                  number: 50001
          - path: /payment
            pathType: Prefix
            backend:
              service:
                name: payment
                port:
                  number: 50002
          - path: /shipping
            pathType: Prefix
            backend:
              service:
                name: shipping
                port:
                  number: 50003
