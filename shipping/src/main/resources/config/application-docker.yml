spring:
  datasource:
    url: jdbc:postgresql://${application.db.host}:${application.db.port}/${application.db.name}
    username: ${application.db.user}
    password: ${application.db.password}
  jpa:
    show-sql: true
    database: postgresql
  liquibase:
    # Drop the existing to repopulate the whole database
    drop-first: true
    # Used for development to update the changelogs continuously
    clear-checksums: true
  kafka:
    bootstrap-servers: ${application.kafka.servers}
    properties:
      schema.registry.url: ${application.schema.registry.server}
logging:
  level:
    # Enable Liquibase logs for development
    liquibase.database: DEBUG
    liquibase.changelog: DEBUG
    # Log to see liquibase's SQL
    liquibase.executor.jvm.[JdbcExecutor$ExecuteStatementCallback]: DEBUG
    # Log Kafka
    org.springframework.kafka.listener: DEBUG
    org.springframework.kafka.listener.adapter: INFO
grpc:
  server:
    port: 50013
  client:
    shipping:
      # Choose gRPC target (or connect to a gRPC server)
      # See https://yidongnan.github.io/grpc-spring-boot-starter/en/client/configuration.html#choosing-the-target
      address: static://localhost:50013
      # Disable TLS for development
      # See https://yidongnan.github.io/grpc-spring-boot-starter/en/client/security.html#disable-transport-layer-security
      negotiationType: plaintext
application:
  db:
    host: "Please set APPLICATION_DB_HOST environment variable"
    port: "Please set APPLICATION_DB_PORT environment variable"
    name: "Please set APPLICATION_DB_NAME environment variable"
    user: "Please set APPLICATION_DB_USER environment variable"
    password: "Please set APPLICATION_DB_PASSWORD environment variable"
  kafka:
    servers: "Please set APPLICATION_KAFKA_SERVERS environment variable"
  schema.registry:
    server: "Please set APPLICATION_SCHEMA_REGISTRY_SERVER environment variable"
  host: vinci.com
